<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>django on 卡塞尔的博客</title>
    <link>/tags/django/</link>
    <description>Recent content in django on 卡塞尔的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 05 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="/tags/django/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>django middleware</title>
      <link>/post/django/2-core_http_middleware/</link>
      <pubDate>Fri, 05 May 2023 00:00:00 +0000</pubDate>
      
      <guid>/post/django/2-core_http_middleware/</guid>
      <description>MIDDLEWARE/get_response 5.2 django处理http请求源码 def __call__(self, environ, start_response): set_script_prefix(get_script_name(environ)) signals.request_started.send(sender=self.__class__, environ=environ) # WSGIRequest对象 -&amp;gt; HttpRequest类 request = self.request_class(environ) # response是什么 response = self.get_response(request)</description>
    </item>
    
    <item>
      <title>django runserver</title>
      <link>/post/django/core-runserver-2-run/</link>
      <pubDate>Fri, 05 May 2023 00:00:00 +0000</pubDate>
      
      <guid>/post/django/core-runserver-2-run/</guid>
      <description>启动命令 python3 manage.py runserver 0.0.0.0:8000 平时用的命令就是这个, 入口是 manage.py 文件 manage.py 管理入口文件 def main(): &amp;#34;&amp;#34;&amp;#34;Run administrative tasks.&amp;#34;&amp;#34;&amp;#34; os.environ.setdefault(&amp;#39;DJANGO_SETTINGS_MODULE&amp;#39;, &amp;#39;firstDjango.settings&amp;#39;) try: from django.core.management import execute_from_command_line except ImportError as exc: raise ImportError( &amp;#34;Couldn&amp;#39;t import Django. Are you sure it&amp;#39;s installed and &amp;#34; &amp;#34;available on your PYTHONPATH environment variable? Did you &amp;#34; &amp;#34;forget</description>
    </item>
    
    <item>
      <title>django WSGIHandler</title>
      <link>/post/django/core-handlers-base/</link>
      <pubDate>Fri, 05 May 2023 00:00:00 +0000</pubDate>
      
      <guid>/post/django/core-handlers-base/</guid>
      <description>WSGIHandler class WSGIHandler(base.BaseHandler): request_class = WSGIRequest def __init__(self, *args, **kwargs): super().__init__(*args, **kwargs) self.load_middleware() def __call__(self, environ, start_response): set_script_prefix(get_script_name(environ)) signals.request_started.send(sender=self.__class__, environ=environ) # WSGIRequest对象 -&amp;gt; HttpRequest类 # def echo(request, *args, **kwargs): # data = request.GET # ret_value = data.get(&amp;#39;name&amp;#39;, &amp;#39;world&amp;#39;) # return HttpResponse(ret_value, content_type=&amp;#39;text/plain&amp;#39;) # 在 app/view/echo 中,</description>
    </item>
    
    <item>
      <title>django wsgiref</title>
      <link>/post/django/core-runserver-1-wsgiref/</link>
      <pubDate>Fri, 05 May 2023 00:00:00 +0000</pubDate>
      
      <guid>/post/django/core-runserver-1-wsgiref/</guid>
      <description>django 封装模型采用 wsgiref 模块 from wsgiref.simple_server import make_server def routers(): # URLConf 配置 urlpatterns = ( (&amp;#39;/book&amp;#39;, foo), (&amp;#39;/web&amp;#39;, bar), ) return urlpatterns def foo(x): return [b&amp;#39;&amp;lt;h1&amp;gt;Hello, book&amp;lt;/h1&amp;gt;&amp;#39;] def bar(x): return [b&amp;#39;&amp;lt;h1&amp;gt;Hello, web&amp;lt;/h1&amp;gt;&amp;#39;] def application(environ, start_response): start_response(&amp;#39;200 OK&amp;#39;, [(&amp;#39;Content-Type&amp;#39;, &amp;#39;text/html&amp;#39;)]) urlpatterns = routers() path = environ[&amp;#39;PATH_INFO&amp;#39;] # http://127.0.0.1:8000/book func = None for item in urlpatterns: if item[0] == path: func = item[1] break</description>
    </item>
    
    <item>
      <title>django-study</title>
      <link>/post/django/django-study/</link>
      <pubDate>Thu, 06 Apr 2023 23:19:42 +0800</pubDate>
      
      <guid>/post/django/django-study/</guid>
      <description>根据视频学习django 记录学习历程 一直学习都是 狗熊掰玉米,掰一个仍一个。 想系统的学习, 没有头绪, 找了n 个xmind ,手抄一遍, 都是不顶用,</description>
    </item>
    
  </channel>
</rss>
