<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>技术 on Ricardo</title>
        <link>https://sona201.github.io/tags/%E6%8A%80%E6%9C%AF/</link>
        <description>Recent content in 技术 on Ricardo</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-CN</language>
        <lastBuildDate>Wed, 22 May 2024 14:20:01 +0800</lastBuildDate><atom:link href="https://sona201.github.io/tags/%E6%8A%80%E6%9C%AF/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>python包都安装到哪里去了</title>
        <link>https://sona201.github.io/posts/where-are-your-python-packages-installed/</link>
        <pubDate>Wed, 22 May 2024 14:20:01 +0800</pubDate>
        
        <guid>https://sona201.github.io/posts/where-are-your-python-packages-installed/</guid>
        <description>&lt;h1 id=&#34;python包都安装到哪里去了&#34;&gt;python包都安装到哪里去了？&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://frostming.com/2019/03-13/where-do-your-packages-go/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;原文链接: 你的 Python 包都装到哪了？&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;终结一切找不到包、可执行文件的问题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;经常在python社区看到的高频问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我安装了pip为什么找不到可执行文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;import module&lt;/code&gt; 为什么报 &lt;code&gt;ModuleNotFound&lt;/code&gt;?&lt;/li&gt;
&lt;li&gt;为什么我用 Pycharm 能运行在cmd里运行不了？&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;python是如何寻找包的&#34;&gt;Python是如何寻找包的&lt;/h2&gt;
&lt;p&gt;现在大家的电脑上很可能不只有一个&lt;code&gt;Python&lt;/code&gt;，还有更多的虚拟环境，导致安装包的时候，一不小心你就忘记注意安装包的路径了。
首先我们来解决找包的问题，这个问题回答起来很简单，但很多人不知道这个原理。
假如你的&lt;code&gt;Python&lt;/code&gt;解释器的路径是&lt;code&gt;$path_prefix/bin/python&lt;/code&gt;，那么你启动&lt;code&gt;Python&lt;/code&gt;交互环境或者用这个解释器运行脚本时，会默认寻找以下位置：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;$path_prefix/lib&lt;/code&gt;(标准库路径)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$path_prefix/lib/pythonX.Y/site-packages&lt;/code&gt;(三方库路径， X.Y是对应&lt;code&gt;Python&lt;/code&gt;的主次版本号，如&lt;code&gt;3.8&lt;/code&gt;,&lt;code&gt;2.7&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;当前工作目录(&lt;code&gt;pwd&lt;/code&gt;命令返回的结果)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这里如果你用的是&lt;code&gt;Linux&lt;/code&gt;上默认的&lt;code&gt;Python&lt;/code&gt;,&lt;code&gt;$path_prefix&lt;/code&gt;就是&lt;code&gt;/usr&lt;/code&gt;，如果你是自己使用默认选项编译的，&lt;code&gt;$path_prefix&lt;/code&gt;就是&lt;code&gt;/usr/local&lt;/code&gt;。从上面第二条可以看到不同的&lt;code&gt;Python&lt;/code&gt;版本的第三方库路径不同，如果你把&lt;code&gt;Python&lt;/code&gt;从&lt;code&gt;3.6&lt;/code&gt;升级到&lt;code&gt;3.8&lt;/code&gt;那么之前装的三方库都没法用了。当然你可以整个文件夹都拷贝过去，大部分情况不会出问题。&lt;/p&gt;
&lt;h2 id=&#34;几个有用的函数&#34;&gt;几个有用的函数&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sys.executable&lt;/code&gt;: 当前使用的&lt;code&gt;Python&lt;/code&gt;解释器路径&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sys.path&lt;/code&gt;: 当前包的搜索路径列表&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sys.prefix&lt;/code&gt;: 当前使用的 &lt;code&gt;$path_prefix&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;除此之外，还可以在命令行中运行&lt;code&gt;python -m site&lt;/code&gt;，会打印出当前的 &lt;code&gt;Python&lt;/code&gt; 的一些信息，包括搜索路径列表。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Python 3.8.15 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;default, Mar &lt;span class=&#34;m&#34;&gt;27&lt;/span&gt; 2024, 17:03:04&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;Clang 14.0.3 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;clang-1403.0.22.14.1&lt;span class=&#34;o&#34;&gt;)]&lt;/span&gt; on darwin
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Type &lt;span class=&#34;s2&#34;&gt;&amp;#34;help&amp;#34;&lt;/span&gt;, &lt;span class=&#34;s2&#34;&gt;&amp;#34;copyright&amp;#34;&lt;/span&gt;, &lt;span class=&#34;s2&#34;&gt;&amp;#34;credits&amp;#34;&lt;/span&gt; or &lt;span class=&#34;s2&#34;&gt;&amp;#34;license&amp;#34;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; more information.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import sys
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt;&amp;gt;&amp;gt; sys.executable
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/Users/admin/PycharmProjects/opstools/.venv/bin/python&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt;&amp;gt;&amp;gt; sys.path
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;, &lt;span class=&#34;s1&#34;&gt;&amp;#39;/Users/admin/.pyenv/versions/3.8.15/lib/python38.zip&amp;#39;&lt;/span&gt;, &lt;span class=&#34;s1&#34;&gt;&amp;#39;/Users/admin/.pyenv/versions/3.8.15/lib/python3.8&amp;#39;&lt;/span&gt;, &lt;span class=&#34;s1&#34;&gt;&amp;#39;/Users/admin/.pyenv/versions/3.8.15/lib/python3.8/lib-dynload&amp;#39;&lt;/span&gt;, &lt;span class=&#34;s1&#34;&gt;&amp;#39;/Users/admin/PycharmProjects/opstools/.venv/lib/python3.8/site-packages&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt;&amp;gt;&amp;gt; sys.prefix
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/Users/admin/PycharmProjects/opstools/.venv&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;使用环境变量添加搜索路径&#34;&gt;使用环境变量添加搜索路径&lt;/h2&gt;
&lt;p&gt;如果你的包的路径不存在上面列出的搜索路径列表里，可以把路径加到&lt;code&gt;PYTHONPATH&lt;/code&gt;环境变量里，多个路径用&lt;code&gt;:&lt;/code&gt;隔开(Windows用&lt;code&gt;;&lt;/code&gt;)。&lt;/p&gt;
&lt;p&gt;但需注意，避免把不同&lt;code&gt;Python&lt;/code&gt;版本包的路径加到&lt;code&gt;PYTHONPATH&lt;/code&gt;里，比如&lt;code&gt;PYTHONPATH=/home/admin/.local/lib/python2.7/site-packages&lt;/code&gt;，因为&lt;code&gt;PYTHONPATH&lt;/code&gt;中的路径是优先于默认搜索路径，如果用&lt;code&gt;Python3&lt;/code&gt;的话会有兼容性问题。事实上&lt;code&gt;PYTHONPATH&lt;/code&gt;里最好不要出现任何带&lt;code&gt;site-packages&lt;/code&gt;的路径。&lt;/p&gt;
&lt;p&gt;顺便说下&lt;code&gt;PATH&lt;/code&gt;是用来找&lt;strong&gt;可执行程序&lt;/strong&gt;的搜索路径，假如你在终端运行命令&lt;code&gt;my_cmd&lt;/code&gt;，系统会依次扫描&lt;code&gt;PATH&lt;/code&gt;中的路径，看&lt;code&gt;my_cmd&lt;/code&gt;是否在于该路径下，所以如果是提示找不到程序或命令无法识别，那你就要看路径是否加到&lt;code&gt;PATH&lt;/code&gt;里了。&lt;/p&gt;
&lt;h2 id=&#34;python-是如何安装包的&#34;&gt;Python 是如何安装包的&lt;/h2&gt;
&lt;p&gt;现在用安装&lt;code&gt;Python&lt;/code&gt;包基本是用的&lt;code&gt;pip&lt;/code&gt;，就算你是用&lt;code&gt;pipenv&lt;/code&gt;，&lt;code&gt;poetry&lt;/code&gt;，底层依然是&lt;code&gt;pip&lt;/code&gt;，一律适用。如果你没有安装&lt;code&gt;pip&lt;/code&gt;，请参考&lt;a class=&#34;link&#34; href=&#34;https://pip.pypa.io/en/stable/installation/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;pip 安装&lt;/a&gt;，如果安装了还无法使用&lt;code&gt;pip&lt;/code&gt;命令请看上一节。&lt;/p&gt;
&lt;p&gt;运行&lt;code&gt;pip&lt;/code&gt;有两种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pip ...&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;python -m pip ...&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第一种方式和第二种方式大同小异，区别是第一种方式使用的 Python 解释器是写在 pip 文件的 shebang 里的，一般情况下，如果你的 pip 路径是&lt;code&gt;$path_prefix/bin/pip&lt;/code&gt;，那么 &lt;code&gt;Python&lt;/code&gt; 路径对应的就是 &lt;code&gt;$path_prefix/bin/python&lt;/code&gt;。如果你用的是 &lt;code&gt;Unix&lt;/code&gt; 系统则 &lt;code&gt;cat $(which pip)&lt;/code&gt; 第一行就包含了 &lt;code&gt;Python&lt;/code&gt; 解释器的路径。第二种方式则显式地指定了 &lt;code&gt;Python&lt;/code&gt; 的位置。这条规则，对于所有 &lt;code&gt;Python&lt;/code&gt; 的可执行程序都是适用的。流程如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sona201.github.io/images/20240517-python%e8%b7%af%e5%be%84.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;20240517-python路径&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;那么，不加任何自定义配置时，使用 pip 安装包就会自动安装到 &lt;code&gt;$path_prefix/lib/pythonX.Y/site-packages&lt;/code&gt; 下（&lt;code&gt;$path_prefix&lt;/code&gt; 是从上一段里得到的），可执行程序安装到 &lt;code&gt;$path_prefix/bin&lt;/code&gt; 下，如果需要在命令行直接使用 &lt;code&gt;my_cmd&lt;/code&gt; 运行，记得加到 &lt;code&gt;PATH&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;pip-中更改安装位置的选项&#34;&gt;pip 中更改安装位置的选项&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--prefix PATH&lt;/code&gt;，替换&lt;code&gt;path_pretix&lt;/code&gt;为给定的值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--root ROOT_PATH&lt;/code&gt;，在&lt;code&gt;$path_prefix&lt;/code&gt;，前面加上&lt;code&gt;ROOT_PATH&lt;/code&gt;，比如&lt;code&gt;--root /home/admin&lt;/code&gt;，&lt;code&gt;$path_prefix&lt;/code&gt;就会从&lt;code&gt;/usr&lt;/code&gt;变成&lt;code&gt;/home/admin/usr&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--target TARGET&lt;/code&gt;，直接指定安装到&lt;code&gt;TARGET&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;虚拟环境&#34;&gt;虚拟环境&lt;/h2&gt;
&lt;p&gt;虚拟环境就是为了隔离不同项目的依赖包，使他们安装到不同的路径下，以防止依赖冲突的问题。理解了 Python 是如何安装包的机制之后就不难理解虚拟环境(&lt;code&gt;virturalenv&lt;/code&gt;, &lt;code&gt;venv&lt;/code&gt;模块)的原理。其实，运行 &lt;code&gt;virtualenv myenv&lt;/code&gt; 会复制一个新的Python解释器到&lt;code&gt;myenv/bin&lt;/code&gt;，并创建好&lt;code&gt;myenv_lib&lt;/code&gt;，&lt;code&gt;myenv/lib/pythonX.Y/site-packages&lt;/code&gt;等目录（&lt;code&gt;venv&lt;/code&gt;模块不是用的复制，但结果基本一样）。执行&lt;code&gt;source myenv/bin/activate&lt;/code&gt;以后会把&lt;code&gt;myenv/bin&lt;/code&gt;塞到&lt;code&gt;PATH&lt;/code&gt;前面，让这个复制出来的 &lt;code&gt;Python&lt;/code&gt; 解释器最优先被搜索到。这样，后续安装包时，&lt;code&gt;$path_prefix&lt;/code&gt;就会是&lt;code&gt;myenv&lt;/code&gt;了，从而实现了安装路径的隔离。&lt;/p&gt;
&lt;h2 id=&#34;脚本运行方式对搜索路径的影响&#34;&gt;脚本运行方式对搜索路径的影响&lt;/h2&gt;
&lt;p&gt;从上面的介绍大家可以知道，Python 找不找得到一个包，最直接的原因是&lt;code&gt;sys.path&lt;/code&gt;，而更进一步的原因是&lt;code&gt;sys.executable&lt;/code&gt;的路径。程序写完了，我们总得需要运行它，不同的运行方法却有可能影响到&lt;code&gt;sys.path&lt;/code&gt;而造成不同的行为，下面我们就来讨论这个问题。&lt;/p&gt;
&lt;h3 id=&#34;情况一&#34;&gt;情况一&lt;/h3&gt;
&lt;p&gt;假设你的包结构如下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;.py_test
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── main.py
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;└── my_package
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    └── b.py
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;main.py&lt;/code&gt;的内容：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;my_package.b&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;b.py&lt;/code&gt; 的文件内容很简单：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;sys&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;I&amp;#39;m b&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sys&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;现在在 &lt;code&gt;main.py&lt;/code&gt; 同级的目录下执行，可以看到正常输出&lt;code&gt;path&lt;/code&gt;，且&lt;code&gt;path&lt;/code&gt;路径第一个就是我们项目的当前目录&lt;code&gt;py_test&lt;/code&gt;，也是我们的执行目录&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ py_test python main.py 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;I&lt;span class=&#34;s1&#34;&gt;&amp;#39;m b
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;[&amp;#39;&lt;/span&gt;/Users/admin/Files/Projects/py_test&lt;span class=&#34;s1&#34;&gt;&amp;#39;, &amp;#39;&lt;/span&gt;/Users/admin/.pyenv/versions/3.8.15/lib/python38.zip&lt;span class=&#34;s1&#34;&gt;&amp;#39;, &amp;#39;&lt;/span&gt;/Users/admin/.pyenv/versions/3.8.15/lib/python3.8&lt;span class=&#34;s1&#34;&gt;&amp;#39;, &amp;#39;&lt;/span&gt;/Users/admin/.pyenv/versions/3.8.15/lib/python3.8/lib-dynload&lt;span class=&#34;s1&#34;&gt;&amp;#39;, &amp;#39;&lt;/span&gt;/Users/admin/.pyenv/versions/3.8.15/lib/python3.8/site-packages&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;python xxx.py&lt;/code&gt; 的运行方式叫做直接运行，这时该文件中的 &lt;code&gt;__name__&lt;/code&gt; 值会指定为 &lt;code&gt;__main__&lt;/code&gt;，IDE 中的「 Run File」「 运行脚本」用的就是这种方式。可以看到这时 &lt;code&gt;sys.path&lt;/code&gt;的第一个值是该脚本文件所在的目录，随脚本路径而变化，记住我们执行测试始终是在 &lt;code&gt;/home/admin/test_path&lt;/code&gt; 这个目录下。&lt;/p&gt;
&lt;h3 id=&#34;情况二&#34;&gt;情况二&lt;/h3&gt;
&lt;p&gt;还是那个结构，我们将项目复制一份，在&lt;code&gt;my_package&lt;/code&gt;目录里增加一个&lt;code&gt;a.py&lt;/code&gt;文件，仅做一个简单的打印`print(&amp;ldquo;I&amp;rsquo;m a&amp;rdquo;)&lt;/p&gt;
&lt;p&gt;项目结构如下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;.py_test1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── main.py
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;└── my_package
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	├── a.py
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    └── b.py
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;a.py&lt;/code&gt; 的文件内容：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;I&amp;#39;m a&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;好，那么如果我们需要在 &lt;code&gt;b.py&lt;/code&gt; 中导入 &lt;code&gt;a.py&lt;/code&gt;，那么 &lt;code&gt;b.py&lt;/code&gt; 脚本中应该怎么写呢？&lt;/p&gt;
&lt;p&gt;&lt;code&gt;b.py&lt;/code&gt; 的文件内容，这里的&lt;code&gt;import&lt;/code&gt;并没有写在最上面是为了能看到&lt;code&gt;sys.path&lt;/code&gt;的输出：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;sys&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;I&amp;#39;m b&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sys&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;a&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;此时，再执行一遍上面的测试&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ py_test1 python main.py     
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;I&lt;span class=&#34;s1&#34;&gt;&amp;#39;m b
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;[&amp;#39;&lt;/span&gt;/Users/admin/Files/Projects/py_test1&lt;span class=&#34;s1&#34;&gt;&amp;#39;, &amp;#39;&lt;/span&gt;/Users/admin/.pyenv/versions/3.8.15/lib/python38.zip&lt;span class=&#34;s1&#34;&gt;&amp;#39;, &amp;#39;&lt;/span&gt;/Users/admin/.pyenv/versions/3.8.15/lib/python3.8&lt;span class=&#34;s1&#34;&gt;&amp;#39;, &amp;#39;&lt;/span&gt;/Users/admin/.pyenv/versions/3.8.15/lib/python3.8/lib-dynload&lt;span class=&#34;s1&#34;&gt;&amp;#39;, &amp;#39;&lt;/span&gt;/Users/admin/.pyenv/versions/3.8.15/lib/python3.8/site-packages&lt;span class=&#34;s1&#34;&gt;&amp;#39;]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;Traceback (most recent call last):
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;  File &amp;#34;main.py&amp;#34;, line 1, in &amp;lt;module&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;    import my_package.b
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;  File &amp;#34;/Users/admin/Files/Projects/py_test1/my_package/b.py&amp;#34;, line 6, in &amp;lt;module&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;    import a
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;ModuleNotFoundError: No module named &amp;#39;&lt;/span&gt;a&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;执行报错了，根据前面讲的内容，这个报错就是意料之中了——&lt;code&gt;a.py&lt;/code&gt;所在的目录 &lt;code&gt;/Users/admin/Files/Projects/py_test1/my_package&lt;/code&gt; 压根没有包含  &lt;code&gt;sys.path&lt;/code&gt;中 ，自然就找不到 &lt;code&gt;a&lt;/code&gt; 文件了。&lt;/p&gt;
&lt;p&gt;那换个思路，直接在当前main目录执行&lt;code&gt;b.py&lt;/code&gt;是否会报错？&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ py_test1 python my_package/b.py 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;I&lt;span class=&#34;s1&#34;&gt;&amp;#39;m b
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;[&amp;#39;&lt;/span&gt;/Users/admin/Files/Projects/py_test1/my_package&lt;span class=&#34;s1&#34;&gt;&amp;#39;, &amp;#39;&lt;/span&gt;/Users/admin/.pyenv/versions/3.8.15/lib/python38.zip&lt;span class=&#34;s1&#34;&gt;&amp;#39;, &amp;#39;&lt;/span&gt;/Users/admin/.pyenv/versions/3.8.15/lib/python3.8&lt;span class=&#34;s1&#34;&gt;&amp;#39;, &amp;#39;&lt;/span&gt;/Users/admin/.pyenv/versions/3.8.15/lib/python3.8/lib-dynload&lt;span class=&#34;s1&#34;&gt;&amp;#39;, &amp;#39;&lt;/span&gt;/Users/admin/.pyenv/versions/3.8.15/lib/python3.8/site-packages&lt;span class=&#34;s1&#34;&gt;&amp;#39;]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;I&amp;#39;&lt;/span&gt;m a
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;结果没有报错，相应的目录位置也变了，不是&lt;code&gt;main.py&lt;/code&gt;所在的&lt;code&gt;/Users/admin/Files/Projects/py_test1&lt;/code&gt;目录，而是&lt;code&gt;my_package&lt;/code&gt;目录&lt;/p&gt;
&lt;h3 id=&#34;情况三&#34;&gt;情况三&lt;/h3&gt;
&lt;p&gt;还是刚刚的代码，只是把&lt;code&gt;b.py&lt;/code&gt;的内容更新了下，将 &lt;code&gt;import a&lt;/code&gt; 改成 &lt;code&gt;from my_package import a&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;sys&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;I&amp;#39;m b&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sys&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;my_package&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;同样的先执行&lt;code&gt;python main.py&lt;/code&gt;测试（我重新拷贝了项目命名为&lt;code&gt;py_test2&lt;/code&gt;）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ py_test2 python3 main.py 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;I&lt;span class=&#34;s1&#34;&gt;&amp;#39;m b
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;[&amp;#39;&lt;/span&gt;/Users/admin/Files/Projects/py_test2&lt;span class=&#34;s1&#34;&gt;&amp;#39;, &amp;#39;&lt;/span&gt;/Users/admin/.pyenv/versions/3.8.15/lib/python38.zip&lt;span class=&#34;s1&#34;&gt;&amp;#39;, &amp;#39;&lt;/span&gt;/Users/admin/.pyenv/versions/3.8.15/lib/python3.8&lt;span class=&#34;s1&#34;&gt;&amp;#39;, &amp;#39;&lt;/span&gt;/Users/admin/.pyenv/versions/3.8.15/lib/python3.8/lib-dynload&lt;span class=&#34;s1&#34;&gt;&amp;#39;, &amp;#39;&lt;/span&gt;/Users/admin/.pyenv/versions/3.8.15/lib/python3.8/site-packages&lt;span class=&#34;s1&#34;&gt;&amp;#39;]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;I&amp;#39;&lt;/span&gt;m a
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;改成 &lt;code&gt;from my_package import a&lt;/code&gt;，执行不报错了，注意由于 &lt;code&gt;b&lt;/code&gt; 是在 &lt;code&gt;my_package&lt;/code&gt; 包中的，这时可以使用相对导入，写 &lt;code&gt;from . import a&lt;/code&gt; 和 &lt;code&gt;from my_package import a&lt;/code&gt; 的效果是一样的。&lt;/p&gt;
&lt;p&gt;因为基于同样的分析，我们可以推断直接执行 &lt;code&gt;python my_package/b.py&lt;/code&gt;会报错提示&lt;code&gt;找不到 my_package&lt;/code&gt;，运行结果如下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;py_test2 python my_package/b.py
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;I&lt;span class=&#34;s1&#34;&gt;&amp;#39;m b
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;[&amp;#39;&lt;/span&gt;/Users/admin/Files/Projects/py_test2/my_package&lt;span class=&#34;s1&#34;&gt;&amp;#39;, &amp;#39;&lt;/span&gt;/Users/admin/.pyenv/versions/3.8.15/lib/python38.zip&lt;span class=&#34;s1&#34;&gt;&amp;#39;, &amp;#39;&lt;/span&gt;/Users/admin/.pyenv/versions/3.8.15/lib/python3.8&lt;span class=&#34;s1&#34;&gt;&amp;#39;, &amp;#39;&lt;/span&gt;/Users/admin/.pyenv/versions/3.8.15/lib/python3.8/lib-dynload&lt;span class=&#34;s1&#34;&gt;&amp;#39;, &amp;#39;&lt;/span&gt;/Users/admin/.pyenv/versions/3.8.15/lib/python3.8/site-packages&lt;span class=&#34;s1&#34;&gt;&amp;#39;]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;Traceback (most recent call last):
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;  File &amp;#34;my_package/b.py&amp;#34;, line 7, in &amp;lt;module&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;    from my_package import a
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;ModuleNotFoundError: No module named &amp;#39;&lt;/span&gt;my_package&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;果然跟我们推理的一样，就是路径不对报错。&lt;/p&gt;
&lt;h3 id=&#34;情况四&#34;&gt;情况四&lt;/h3&gt;
&lt;p&gt;那么我有没有让这两次运行都不报错的方法呢？有。我们要知道，一个项目中的入口是有限的，实际上不会出现可以执行的代码既在顶层有，又在子目录里也有。我们应该把主要的运行逻辑，都放在 &lt;code&gt;main.py&lt;/code&gt; 中（不一定是这个名字，比如 &lt;code&gt;Django&lt;/code&gt; 项目是 &lt;code&gt;manage.py&lt;/code&gt;），如果这时确实需要运行一个子目录中某脚本的代码，应该用 &lt;code&gt;python -m &amp;lt;module_name&amp;gt;&lt;/code&gt;，而 &lt;code&gt;b.py&lt;/code&gt; 中导入 &lt;code&gt;a&lt;/code&gt; 的语句应为 &lt;code&gt;from my_package import a&lt;/code&gt;，我们来看一下运行效果：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ py_test2 python main.py        
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;I&lt;span class=&#34;s1&#34;&gt;&amp;#39;m b
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;[&amp;#39;&lt;/span&gt;/Users/admin/Files/Projects/py_test2&lt;span class=&#34;s1&#34;&gt;&amp;#39;, &amp;#39;&lt;/span&gt;/Users/admin/.pyenv/versions/3.8.15/lib/python38.zip&lt;span class=&#34;s1&#34;&gt;&amp;#39;, &amp;#39;&lt;/span&gt;/Users/admin/.pyenv/versions/3.8.15/lib/python3.8&lt;span class=&#34;s1&#34;&gt;&amp;#39;, &amp;#39;&lt;/span&gt;/Users/admin/.pyenv/versions/3.8.15/lib/python3.8/lib-dynload&lt;span class=&#34;s1&#34;&gt;&amp;#39;, &amp;#39;&lt;/span&gt;/Users/admin/.pyenv/versions/3.8.15/lib/python3.8/site-packages&lt;span class=&#34;s1&#34;&gt;&amp;#39;]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;I&amp;#39;&lt;/span&gt;m a
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ py_test2 python -m my_package.b
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;I&lt;span class=&#34;s1&#34;&gt;&amp;#39;m b
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;[&amp;#39;&lt;/span&gt;/Users/admin/Files/Projects/py_test2&lt;span class=&#34;s1&#34;&gt;&amp;#39;, &amp;#39;&lt;/span&gt;/Users/admin/.pyenv/versions/3.8.15/lib/python38.zip&lt;span class=&#34;s1&#34;&gt;&amp;#39;, &amp;#39;&lt;/span&gt;/Users/admin/.pyenv/versions/3.8.15/lib/python3.8&lt;span class=&#34;s1&#34;&gt;&amp;#39;, &amp;#39;&lt;/span&gt;/Users/admin/.pyenv/versions/3.8.15/lib/python3.8/lib-dynload&lt;span class=&#34;s1&#34;&gt;&amp;#39;, &amp;#39;&lt;/span&gt;/Users/admin/.pyenv/versions/3.8.15/lib/python3.8/site-packages&lt;span class=&#34;s1&#34;&gt;&amp;#39;]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;I&amp;#39;&lt;/span&gt;m a
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;可以看到这两次运行的 &lt;code&gt;sys.path&lt;/code&gt; 内容一致了，它的第一个值是当前运行所在的目录。这种运行方式叫做以模块方式运行，&lt;code&gt;python -m&lt;/code&gt; 后面的参数是（以 &lt;code&gt;.&lt;/code&gt; 分隔的）模块名，而不是路径名。由于这种统一性，你在项目中的所有导入都可以用相同的定义方式，而不用管是在哪个脚本中。这也是为什么 &lt;code&gt;Django&lt;/code&gt; 官方文档中推荐导入名称全部用 &lt;code&gt;myapp.models.users&lt;/code&gt; 这种形式。&lt;/p&gt;
&lt;p&gt;除此之外，以模块方式运行的时候，传入模块名的每一级父模块（或包）都会以模块形式运行，这意味着你可以在模块中使用相对导入（以直接运行方式运行不可以），并且传入的模块中&lt;code&gt;__name__&lt;/code&gt; 的值会置为 &lt;code&gt;__main__&lt;/code&gt;，你依然可以应用 &lt;code&gt;if __name__ == &amp;quot;__main__&amp;quot;:&lt;/code&gt; 的判断。如果 &lt;code&gt;python -m &amp;lt;module_name&amp;gt;&lt;/code&gt; 中传入的模块是个包，那么会执行包目录中的 &lt;code&gt;__main__.py&lt;/code&gt; 脚本（如果存在），此时该脚本的 &lt;code&gt;__name__&lt;/code&gt; 值为 &lt;code&gt;__main__&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;看到这里大家可以发现，关于包路径搜索最重要的就是这个&lt;code&gt;$path_prefix&lt;/code&gt;路径前缀，而这个值又是从使用的 &lt;code&gt;Python&lt;/code&gt; 解释器路径推导出来的。所以要找到包的路径，只需要知道解释器的路径就可以了，如果遇到改变包的路径，只需要通过正确的PATH设置，指定你想要的 &lt;code&gt;Python&lt;/code&gt; 解释器即可。&lt;/p&gt;
&lt;p&gt;现在回到开头的三个问题，已经解决了。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
