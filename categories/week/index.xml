<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>week on Ricardo</title>
        <link>https://sona201.github.io/categories/week/</link>
        <description>Recent content in week on Ricardo</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-CN</language>
        <lastBuildDate>Wed, 09 Aug 2023 22:20:00 +0800</lastBuildDate><atom:link href="https://sona201.github.io/categories/week/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>shaoxing</title>
        <link>https://sona201.github.io/posts/week33/</link>
        <pubDate>Wed, 09 Aug 2023 22:20:00 +0800</pubDate>
        
        <guid>https://sona201.github.io/posts/week33/</guid>
        <description>&lt;h2 id=&#34;2023年第33周0807-0813&#34;&gt;2023年第33周，0807-0813&lt;/h2&gt;
&lt;h2 id=&#34;胡算乱想&#34;&gt;胡算乱想&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;心态平衡后, 对学习知识的效率要求大大降低, 反而让自己更耐心. 对于知识星球的网络只是学习, 放松了很多. 理解一年做一个实验的道理, 反复做, 每次都有不同的收获. &lt;br&gt;
尽量在实际场景中理解知识点, 也就理解那张图, 零散的知识串成体系, 不再是孤岛.&lt;/li&gt;
&lt;li&gt;看到有人提到 李笑来 《财富自由之路》和《把时间当作朋友》这两本书。第二本我也看过，确实不错。网友说的很精准，不买币，只看书。
对 时间的朋友这书的内容不太记得，想到复利，也是最近比较感慨的，做事总是没有沉淀，每次都像是第一次做，不是好事。要多做笔记，搞博客。前期不要太在意内容质量不高，尽量去写高质量的，后期慢慢迭代。知识需要升级的。&lt;/li&gt;
&lt;li&gt;《财富自由之路》 这本书微信读书已经下架, 考虑要不要买本实体书&lt;/li&gt;
&lt;li&gt;听了 tinyfool 关于学英语的一期视频, 最让我意外的是, 他建议学英语不要看字幕, 会让大脑偷懒, 只去理解字幕, 不在乎听力. &lt;br&gt;
如果经常听到一个单词, 根据语境能猜出大概得意思, 这种方式学习会更牢靠, 好像有点道理.&lt;/li&gt;
&lt;li&gt;这个现在感觉不是完全可行, 一个单纯的聊天, 并不会把一些单词关联到场景里. &lt;br&gt;
今天在电梯里听到老外聊天说到送花啥的, 我只能猜到大概, 但并不清楚具体的一些单词词义, 这种场景也不会给我反复练习的机会. &lt;br&gt;
还是得不停的重复看一些剧, 看到最后能直接不看字幕, 或者只看英文字幕就算成功.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;阅读&#34;&gt;阅读&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.kawabangga.com/posts/4515&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;TTY 到底是什么？&lt;/a&gt;
这周再把文章看一遍, 然后写下笔记跟读后感吧, 记录下自己不熟悉的知识, 这周看下就先放下, 这个知识点暂时不知道怎么用, 实际使用场景也很少. &lt;br&gt;
过于在意大而全并不是件好事, 放下也是不错的选择&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.alswl.com/2023/07/architecture-design-the-easy-way/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;架构设计 the Easy Way&lt;/a&gt;&lt;br&gt;
文章还没有来的及仔细研读，但总体内容比较喜欢，讲了一些&amp;quot;大道理&amp;quot;，也举例具体案例，都是比较贴近我的日常实践。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;决定后续还是慢慢维护自己的博客，博客还是比较重要得，既能形成自己的知识体系，也能向别人展示自己的技能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;关于半队列, 全队列的知识点, 之前不是很理解. 最近复习了一些网络基础知识再看就清晰很多了.
&lt;a class=&#34;link&#34; href=&#34;https://www.51cto.com/article/687595.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;从一次线上问题说起，详解 TCP 半连接队列、全连接队列&lt;/a&gt; &lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/xiaolincoding/p/12995358.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;TCP 半连接队列和全连接队列&lt;/a&gt; &lt;br&gt;
再回过头看 小林coding 讲的网络基础知识确实不错, 而且会有一些&amp;quot;课后作业&amp;quot;, 似乎更懂我哪里还不熟&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;本周的 wireshark 并没有看太多, 但更多的心思在了解一些概念上, 直接通过 wireshark 实验了解. 这点感觉做的还行. 但整体进度确实慢.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;视频&#34;&gt;视频&lt;/h3&gt;
&lt;p&gt;永生之酒, 剧场版已经看完, 还有三个 ov 版没看. 开始看的云里雾里, 后面能渐渐理清故事线, 最后爱上整个设定架构. &lt;br&gt;
在我看来永生之酒有点像蝙蝠侠小丑那集, 小丑给两艘游轮安装了炸药, 把遥控器分别给了对方. 堵得是人性. 永生之酒也一样, 给他们一个似乎只有你死我活的背景. &lt;br&gt;
但如果人人都忘记这个规则, 那就不能构成威胁, 甚至更有意思.&lt;/p&gt;
&lt;h2 id=&#34;博客笔记&#34;&gt;博客/笔记&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/sona201/noteDoc/blob/master/tcp/wireshark%20%E9%98%85%E8%AF%BB.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;wireshark 一些理解&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;java 笔记&lt;/li&gt;
&lt;li&gt;django 序列化 context&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;本周行动&#34;&gt;本周行动&lt;/h2&gt;
&lt;p&gt;上周说记录学习笔记, 8-10 写了一篇入门笔记: &lt;a class=&#34;link&#34; href=&#34;https://github.com/sona201/noteDoc/blob/master/java/java_spring.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;java_spring 笔记&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;四象限法&#34;&gt;四象限法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;【重要不紧急1(有计划的执行)】&lt;/li&gt;
&lt;li&gt;【重要紧急2(立即处理)】&lt;/li&gt;
&lt;li&gt;【不重要紧急3(合理授权)】&lt;/li&gt;
&lt;li&gt;【不重要不紧急4(控制比例)】&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;vim学习每周更新&#34;&gt;vim学习(每周更新)&lt;/h3&gt;
&lt;p&gt;本周 vim 没有进展, 几乎停止, 打算找本书详细看看.&lt;/p&gt;
&lt;h2 id=&#34;虚无主义想法&#34;&gt;虚无主义想法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;搞清楚request请求的链路，比如view层的get请求   ==&amp;gt;  可以让代码写的更快更好，然后呢？对，就是为了熟练的curd，然后把这个思想用来看java
django restful serializer 与 get_queryset 的代码执行顺序, 怎么看源码&lt;/li&gt;
&lt;li&gt;解决当前自己写的一些bug，不能解决的问题，感觉需要优化的点。自定义的response里有两层data，不知道怎么解决&lt;/li&gt;
&lt;li&gt;mysql的orm调用返回datetime是时区类型，怎么能自动改成普通类型&lt;/li&gt;
&lt;li&gt;django debug tool &lt;a class=&#34;link&#34; href=&#34;https://github.com/jazzband/django-debug-toolbar&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/jazzband/django-debug-toolbar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;django prometheus 暴露&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://pypi.org/project/django-sql-explorer/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://pypi.org/project/django-sql-explorer/&lt;/a&gt; (这个已经不重要了，有sql抓包)&lt;/li&gt;
&lt;li&gt;xops的好多功能都没有玩过，要加油了，要自己写个服务，开源玩起来。&lt;/li&gt;
&lt;li&gt;多逛逛大佬的博客，看看他们的知识体系构建，平时都记录了哪些&lt;/li&gt;
&lt;li&gt;这周找到两个关于网络底层的文章，真的很想自己也能有这样的能力，争取能写成文章 &lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://plantegg.github.io/2019/06/21/%E5%B0%B1%E6%98%AF%E8%A6%81%E4%BD%A0%E6%87%82%E6%8A%93%E5%8C%85--WireShark%E4%B9%8B%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%89%88tshark/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://plantegg.github.io/2019/06/21/%E5%B0%B1%E6%98%AF%E8%A6%81%E4%BD%A0%E6%87%82%E6%8A%93%E5%8C%85--WireShark%E4%B9%8B%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%89%88tshark/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;整理笔记，对个人成长很重要的，而且不是几个小时就能学会的内容，需要几周甚至几个月才能学完的知识，对以后工作，职业都有很大的帮助，这个已经在做了。&lt;/li&gt;
&lt;li&gt;websocket: 找到 k8s websocket 代码，有空抄一抄。 失败，客户端调用失败&lt;/li&gt;
&lt;li&gt;hugo 主题美化, 改成自己喜欢的样子.&lt;/li&gt;
&lt;li&gt;再次学习陈浩的专栏，应该会有收获&lt;/li&gt;
&lt;li&gt;学习k8s -&amp;gt; kubernetes网络权威指南，这个优先级降低，遇到问题解决问题，因为系统过于庞大，系统性的学习成本很大，优势不清楚。&lt;/li&gt;
&lt;li&gt;看老友记，学习英语 / 影子英语，学习方法。还保存了英语学习的方法&lt;/li&gt;
&lt;li&gt;追动漫&lt;/li&gt;
&lt;li&gt;算法学习&lt;/li&gt;
&lt;li&gt;devops项目todo, 同步资源，application最好要提上日程，因为定时任务时间改成半小时执行一次。&lt;/li&gt;
&lt;li&gt;devops项目todo,  k8s命令行交互&lt;/li&gt;
&lt;li&gt;django源码学习，是否需要每周产出笔记？但不需要为了产出而产出&lt;/li&gt;
&lt;li&gt;jvm优化(没有方向，目前实在点的就是学会看gc日志，与中信沟通交流) -&amp;gt; 遇到问题查问题，不主动丰富知识体系，因为缺口太大，短时间不会见效。知识利用率低&lt;/li&gt;
&lt;li&gt;李三红的极客时间视频学习。这个应该能坚持学完吧，貌似对调优有提高。&lt;/li&gt;
&lt;li&gt;java入门(廖雪峰java学习指南) -&amp;gt; 学习使用spring框架，写一个小demo网上收集了一个文章讲破解java的json序列化的，用来学习 &lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://mp.weixin.qq.com/s/SOKLC_No0hV9RhAavF2hcw&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;基础入门Fastjson系列漏洞&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;wireshark这么薄的一本书，都没有看完。看到一半，想记笔记，搭建博客，博客丑，想搞主题，太分心了。需要多做思想的减法，专注。&lt;/li&gt;
&lt;li&gt;django的中间件记录请求日志，中间件的使用，高级&lt;/li&gt;
&lt;li&gt;django channels功能学习 / channel官网教学深刻理解，然后修改成自己的技能，要学会修改&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;task1-2小时&#34;&gt;Task(1-2小时)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;网上收集了一个文章讲破解java的json序列化的，用来学习，&lt;a class=&#34;link&#34; href=&#34;https://mp.weixin.qq.com/s/SOKLC_No0hV9RhAavF2hcw&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;基础入门Fastjson系列漏洞&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;django的单元测试学习&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;TODO: 处理文件上传卡住的问题，学会在实践中运用知识，不再对tcpdump害怕，不知所措。确认好问题，给大佬一个答复&lt;/li&gt;
&lt;li&gt;TODO: 实验问题，原计划是上周五在公司完成的，但还是偷懒了。想法是今天大致写下实验步骤，下周记录实验数据。这个已经搁置很久了，先下调一个级别，是mysql实验，还是服务器实验，需要看看最初的目的，了解知识点&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;学习 java, 写了 java 博客. 后续把同事写的 java 项目自己启动起来. 然后加个接口.
想做的事情, 用 python/go 写 socket 服务, 了解下 socket 相关实验, 理解 tcp 的相关处理.&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;还是老方法比价舒服，把需要做的事情写下来，完成一件就用笔划去，这样真的能减轻焦虑。&lt;/li&gt;
&lt;li&gt;做好劳逸结合,  上班时间也可以学习, 不是单纯的下楼摸鱼. 不要为了摸鱼而摸鱼.&lt;/li&gt;
&lt;li&gt;我好像特别喜欢记录, 把自己的生活记录下, 会感觉非常有意思, 可以回顾自己, 而不是一遍又一遍的犯同样的错&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        
    </channel>
</rss>
